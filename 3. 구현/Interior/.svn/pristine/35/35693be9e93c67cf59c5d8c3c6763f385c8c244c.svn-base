<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>    
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="${pageContext.request.contextPath }/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<script src="${pageContext.request.contextPath }/js/bootstrap.min.js"></script>

<title>Insert title here</title>

<style type="text/css">
:root {
  /* COLORS */
  --white: #e9e9e9;
  --gray: #333;
  --blue: #0367a6;
  --lightblue: #008997;

  /* RADII */
  --button-radius: 0.7rem;

  /* SIZES */
  --max-width: 900px;
  --max-height: 800px;

  font-size: 16px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

body {
  align-items: center;
  background-color: var(--white);
  background: url("${pageContext.request.contextPath }/images/wallpaperbetter.jpg");
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  display: grid;
  height: 100vh;
  place-items: center;
}

.form__title {
  font-weight: 300;
  margin: 0;
  margin-bottom: 1.25rem;
}

.link {
  color: var(--gray);
  font-size: 0.9rem;
  margin: 1.5rem 0;
  text-decoration: none;
}

.container {
  background-color: var(--white);
  border-radius: var(--button-radius);
  box-shadow: 0 0.9rem 1.7rem rgba(0, 0, 0, 0.25),
    0 0.7rem 0.7rem rgba(0, 0, 0, 0.22);
  height: var(--max-height);
  max-width: var(--max-width);
  overflow: hidden;
  position: relative;
  width: 100%;
}

.container__form {
  height: 100%;
  position: absolute;
  top: 0;
  transition: all 0.6s ease-in-out;
}

.container--signin {
  left: 0;
  width: 50%;
  z-index: 2;
}

.container.right-panel-active .container--signin {
  transform: translateX(100%);
}

.container--signup {
  left: 0;
  opacity: 0;
  width: 50%;
  z-index: 1;
}

.container.right-panel-active .container--signup {
  animation: show 0.6s;
  opacity: 1;
  transform: translateX(100%);
  z-index: 5;
}

.container__overlay {
  height: 100%;
  left: 50%;
  overflow: hidden;
  position: absolute;
  top: 0;
  transition: transform 0.6s ease-in-out;
  width: 50%;
  z-index: 100;
}

.container.right-panel-active .container__overlay {
  transform: translateX(-100%);
}

.overlay {
  background-color: var(--lightblue);
  background: url("${pageContext.request.contextPath }/images/wallpaperbetter.jpg");
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  height: 100%;
  left: -100%;
  position: relative;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
  width: 200%;
}

.container.right-panel-active .overlay {
  transform: translateX(50%);
}

.overlay__panel {
  align-items: center;
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: center;
  position: absolute;
  text-align: center;
  top: 0;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
  width: 50%;
}

.overlay--left {
  transform: translateX(-20%);
}

.container.right-panel-active .overlay--left {
  transform: translateX(0);
}

.overlay--right {
  right: 0;
  transform: translateX(0);
}

.container.right-panel-active .overlay--right {
  transform: translateX(20%);
}

.btn {
  background-color: var(--blue);
  background-image: linear-gradient(90deg, var(--blue) 0%, var(--lightblue) 74%);
  border-radius: 20px;
  border: 1px solid var(--blue);
  color: var(--white);
  cursor: pointer;
  font-size: 0.8rem;
  font-weight: bold;
  letter-spacing: 0.1rem;
  padding: 0.9rem 4rem;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
}

.form > .btn {
  margin-top: 1.5rem;
}

.btn:active {
  transform: scale(0.95);
}

.btn:focus {
  outline: none;
}

.form {
  background-color: var(--white);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 3rem;
  height: 100%;
  text-align: center;
}

.input {
  background-color: #fff;
  border: none;
  padding: 0.9rem 0.9rem;
  margin: 1.0rem 0;
  width: 100%;
}

#form1 div{
	width: 100%;
}

@keyframes show {
  0%,
  49.99% {
    opacity: 0;
    z-index: 1;
  }

  50%,
  100% {
    opacity: 1;
    z-index: 5;
  }
}





/*버튼 css 입히기  */
#check_id{
	position: absolute;
	background-image: linear-gradient(90deg, var(--blue) 0%, var(--lightblue) 74%);
	top: 210px;
	left: 340px;
	width: 60px;
	height: 25px;	
    color: #fff;
    border: none;
    border-radius: 5px;
    background-color: var(--blue);
}

/*버튼 css 입히기  */
#mailAuth{
	position: absolute;
	background-image: linear-gradient(90deg, var(--blue) 0%, var(--lightblue) 74%);
	bottom: 325px;
	left: 300px;
	width: 97px;
	height: 25px;	
    color: #fff;
    border: none;
    border-radius: 5px;
    background-color: var(--blue);
}
/*버튼 css 입히기  */
#AddSearch{
	position: absolute;
	background-image: linear-gradient(90deg, var(--blue) 0%, var(--lightblue) 74%);
	bottom: 250px;
	left: 300px;
	width: 97px;
	height: 25px;	
    color: #fff;
    border: none;
    border-radius: 5px;
    background-color: var(--blue);
}

/* warning Css */
.int-area label.warning{
    color: red;
    animation-duration: .3s ease;
    
}


</style>
 
 <script src="//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
<script>
    function fn_AddSearch() {
        new daum.Postcode({
            oncomplete: function(data) {
                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.
                // 각 주소의 노출 규칙에 따라 주소를 조합한다.
                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
                var addr = ''; // 주소 변수
                var extraAddr = ''; // 참고항목 변수
                //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
                    addr = data.roadAddress;
                } else { // 사용자가 지번 주소를 선택했을 경우(J)
                    addr = data.jibunAddress;
                }
                // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.
                if(data.userSelectedType === 'R'){
                    // 법정동명이 있을 경우 추가한다. (법정리는 제외)
                    // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
                    if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){
                        extraAddr += data.bname;
                    }
                    // 건물명이 있고, 공동주택일 경우 추가한다.
                    if(data.buildingName !== '' && data.apartment === 'Y'){
                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                    }
                    // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
                    if(extraAddr !== ''){
                        extraAddr = ' (' + extraAddr + ')';
                    }
                    // 조합된 참고항목을 해당 필드에 넣는다.
                 // document.getElementById("AddSearch").value = extraAddr;
                } else {
                  //  document.getElementById("sample6_extraAddress").value = '';
                }
                // 우편번호와 주소 정보를 해당 필드에 넣는다.
                // document.getElementById('sample6_postcode').value = data.zonecode;
                document.getElementById("memberAdd").value = addr;
                // 커서를 상세주소 필드로 이동한다.
                document.getElementById("memberAdd").focus();
            }
        }).open();
    }
</script>
 
 <script>
 
//아이디 체크 비동기 함수
 function fn_checkId() {
 	 //alert("fn_checkId");
 	console.log("memberId : ", $("#memberId").val());
 	
 	
 	$.ajax({
 		 url:"<c:url value='/join/idCheck'/>"
 		,type:"post"
 		,data:{"memberId" : $("#memberId").val() }
 		,success: function(data) {
 			console.log("아이디 체크 : ", data);
 		     
 			let txt = $('#memberId').val()
 		     if (txt == '') {
 		          alert('ID를 입력해주세요')
 		     }
 		     else if(data){
	 				alert("사용가능한 아이디 입니다!");
	 			}else{
	 				$("#memberId").val("");
	 				alert("이미 사용중인 아이디 입니다. 다른 아이디를 사용해주세요")
	 			}
          }
 		,error: function() {
 			alert("error")
 			
 		}
 	});
 	
 	
 }
 
 
 
 
 /* validation 쓰려면 이게 필요합니다 왠지는 저두 잘,,복붙했어요,, */
 (function() {
	  "use strict";
	  window.addEventListener("load", function() {
	    var form = document.getElementById("form1");
	    form.addEventListener("submit", function(event) {
	      if (form.checkValidity() == false) {
	        event.preventDefault();
	        event.stopPropagation();
	        form.classList.add("was-validated");
	      }
	      
	      // 서버 연동 처리
	    }, false);
	  }, false);
	}());
 
 
 /* password 일치하는지 검증하는거 */ 
 $(document).ready(function(){
	$(".pw").keyup(function(){
 	let pass1 = $("#memberPass").val();
     let pass2 = $("#memberPassCheck").val();
     
     if (pass1 != "" || pass2 != ""){
     	if (pass1 == pass2){
         	$("#checkPw").html('비밀번호가 일치합니다');
         	$("#checkPw").attr('color','green');
         } else {
         	$("#checkPw").html('비밀번호가 일치하지 않습니다.');
             $("#checkPw").attr('color','red');
         }
     }
 
 	})
 	
 	//메일버튼 클릭시 이벤트
 	$("#mailAuth").on("click", function() {
 		console.log("#mailAuth");
 		
 		// 여기서 메일을 확인할 것이다
 		let memMail = $("#memMail");
 		console.log("memMail : ", memMail.val())
 		
 		// 메일 검증
 	    let checkMemMail = /^[-_a-zA-z0-9]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,4}$/i;
 	    console.log("checkMemMail: ", checkMemMail.test(memMail.val()) );
 	    if( ! checkMemMail.test(memMail.val()) ){
 	    	alert("이메일 양식이 틀립니다. 다시 입력해주세요");
 	    	memMail.val("");
 	    	memMail.next("label").addClass("warning");
 	       return;
 	    }
 	    
 	    
 		$.ajax({
 			url : "<c:url value='/join/mailAuth'/>"
 			,type : "post"
 			,data : {"mail" : memMail.val()}
 			,success : function(data) {
 				// alert("success");
 				console.log("data : ", data);
 				
 				 // 인증 확인하는 창 띄우기
 				let popupWidth = 600;
 				let popupHeight = 150;
 				let winWidth = document.body.offsetWidth;
 				let winHeight = document.body.offsetHeight;
 				let popupX = (winWidth/2) - (popupWidth/2);  
 				let popupY = (winHeight/2) - (popupHeight/2);

 				if(data){
 					let myWin = window.open("<c:url value='/join/mailWindow'/>" 
 						,"mywin"
 						,"left="+popupX+"px,"
 						+"top="+popupY+"px, "
 						+"width="+popupWidth+"px, "
 						+"height="+popupHeight+"px");
 				} 
 			}
 			,error : function() {
 				alert("error");
 			}
 			// ajax 처리하는 동안.. 
 	 		,beforeSend: function() {
 				let width = 150;
 				let height = 150;
 				let top = 50;
 				let left = 50;
 				$('body').append('<div id="div_ajax_load_image" style="position:absolute; top:' 
 					+ top + '%; left:' 
 					+ left + '%; width:' 
 					+ width + 'px; height:' 
 					+ height + 'px; z-index:9999;'
 					+'background:transparent; '
 					+'filter:alpha(opacity=50); '
 					+'opacity:alpha*0.5; '
 					+'margin:auto; '
 					+'padding:0; ">'
 					+'<img src="<c:url value ='/images/simson.gif'/>"'
 					+'style="width:150px; height:150px;"></div>');
 			}
 			,complete: function() {
 				$("#div_ajax_load_image").remove();
 			} 
 		});
 	});
 	
 	
 });
 
function join(){

let f = document.joinForm;
console.log("f", f	);

   f.action="${pageContext.request.contextPath}/login/loginRegister";
   f.submit();
}

function fn_login(){
	//alert("fn_login");
	let f = document.loginForm;
	f.action="${pageContext.request.contextPath}/login/loginCheck";
	f.submit();
}

$(function(){
	window.setTimeout(function(){
		let lc = $("#loginCheck").val();
		if(lc == 'fail'){
			alert("로그인 실패하였습니다. ID 또는 PASSWORD를 확인해주세요!");
		}else if(lc == 'none'){
			alert("로그인 하셔야 이용가능합니다.");
		}else if(lc == 'error'){
			alert("처리 도중 에러가 발생하였습니다. 전산실에 문의 부탁드립니다. 042-719-8850");
		}else if(lc == 'sign'){
			alert("정상적으로 회원등록이 되었습니다. 확인을 누르시고 로그인을 진행주세요");
		}else if(lc == 'quit'){
			alert("회원탈퇴 되었습니다. 다시 가입을 원하시면 join을 눌러주세요");
		}
		
	}, 200 );
});
 
 </script>
 
 
</head>
<body>
<input type="hidden" id="loginCheck" value="${msg }">

<div class="container right-panel-active">
  <!-- Sign Up -->
  <div class="container__form container--signup">
    <form action="" class="form needs-validation" id="form1" novalidate name="joinForm">
      <h2 class="form__title">Sign Up</h2>
      
      
      <!-- 사용자 이름과 이름 validation -->
		<div>
			<input type="text" name="memberNm" placeholder="memberNm" placeholder="NAME" class="input form-control" required pattern="[a-zA-Z]{3,15}"/>
				<div class="valid-feedback">
					사용 가능한 이름입니다!
				</div>
				<div class="invalid-feedback">
					이름은 영문자 3 ~ 15자리 입니다.
				</div>
		</div>
		
		<!-- ID와 ID 인증버튼 -->
		<div>
	      <input type="text" id="memberId" name="memberId" placeholder="ID" class="input form-control" required pattern="[a-zA-Z]{4,10}"/>
		      <div class="valid-feedback">
		           사용 가능한 아이디입니다!
		      </div>
		      <div class="invalid-feedback">
		          ID는  영문자 4 ~ 10자리 입니다.
		      </div>
		      <button type="button" id="check_id" name="check_id" onclick="fn_checkId()" >ID확인</button>
      </div>
      
      <!-- password와 password 검증 -->
    <div>
	      <input type="password" id="memberPass" name="memberPass" placeholder="PASSWORD" class="input pw" />
	      <div>
	      <input type="password" id="memberPassCheck" name="memberPassCheck" placeholder="RECONFIRM PASSWORD" class="input pw" />
	      	<font id = "checkPw" size = "2"></font>
	      </div>
	</div>
      
      
	<!-- 이메일과 이메일 인증 버튼  -->

				<div>
					<input type="email" id="memMail" name="memberMail" placeholder="E-MAIL" class="input form-control" required/>
					<button type="button" id="mailAuth" name="mailAuth" >EMAIL인증</button>
					<div class="valid-feedback">
						사용 가능한 이메일입니다!
					</div>
					<div class="invalid-feedback">
						이메일 양식에 맞게 적어주세요.
					</div>
				</div>

				<!-- 주소, 전화번호 -->
      <input type="text" id="memberAdd" name="memberAdd" placeholder="ADDRESS" class="input" />
      <button type="button" id="AddSearch" name="AddSearch" onclick="fn_AddSearch()">주소 검색</button>
      <input type="text" id="memberHp" name="memberHp" placeholder="HP" class="input" />
      
      
      <!-- 가입 버튼 -->
      <button class="btn" type="submit" onclick="join()">Sign Up</button>
    </form>
  </div>

  <!-- Sign In -->
  <div class="container__form container--signin">
    <form action="#" class="form" id="form2" name="loginForm">
      <h2 class="form__title">Sign In</h2>
     
      <input type="text" placeholder="ID" id="memberId" name="memberId" class="input" />
      
      <input type="password" placeholder="Password"  id="memberPass" name="memberPass" class="input" />
      
              <div class="div_rememberMe">
      		<label for="rememberMe">
				<input type="checkbox" id="rememberMe" name="rememberMe"  value="Y"  ${check} />&nbsp;&nbsp;ID 기억하기
			</label>
        </div>
     
      <button class="btn" onclick="fn_login()">Sign In</button>
    </form>
  </div>

  <!-- Overlay 버튼을 누르면 로그인 창과 회원가입 창을 왔다리 갔다리 할 수 있삼  -->
  <div class="container__overlay">
    <div class="overlay">
      <div class="overlay__panel overlay--left">
        <button class="btn" id="signIn">Sign In</button>
      </div>
      <div class="overlay__panel overlay--right">
        <button class="btn" id="signUp">Sign Up</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

const signInBtn = document.getElementById("signIn");
const signUpBtn = document.getElementById("signUp");
const fistForm = document.getElementById("form1");
const secondForm = document.getElementById("form2");
const container = document.querySelector(".container");

signInBtn.addEventListener("click", () => {
	  container.classList.remove("right-panel-active");
	});

	signUpBtn.addEventListener("click", () => {
	  container.classList.add("right-panel-active");
	});

	fistForm.addEventListener("submit", (e) => e.preventDefault());
	secondForm.addEventListener("submit", (e) => e.preventDefault());


</script>




</body>
</html>