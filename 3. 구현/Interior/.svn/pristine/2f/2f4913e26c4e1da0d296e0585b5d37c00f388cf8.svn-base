package com.leftdivision.interior.evaluation;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.leftdivision.interior.evaluation.service.IEvaluationService;
import com.leftdivision.interior.evaluation.vo.AreaMarkerVO;
import com.leftdivision.interior.evaluation.vo.MarkerVO;
import com.leftdivision.interior.exception.BizNotEffectedException;

@Controller
@RequestMapping("/evaluation")
public class EvaluationController {
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Inject
	IEvaluationService evaService;
	
	// 집 평가 메인 페이지
	@RequestMapping("/Map")
	public String map(Model model, HttpServletRequest request) {
		// 세션 불러오기
		HttpSession session = request.getSession();
		// 마커 리스트 가져오기
		List<MarkerVO> markerList;
		try {
			markerList = evaService.getMarkerList();
			logger.info("markerList : " + markerList);
			session.setAttribute("markerList", markerList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// 지도 시작 위치 지정 >> 세션에 담자
		MarkerVO regMarker = new MarkerVO();
		regMarker.setMarkerLat("36.326725");
		regMarker.setMarkerLongt("127.407470");
		session.setAttribute("regMarker", regMarker);
		
		
		return "evaluation.evaluationMap";
	}
	
	// 리다이렉트 맵
	@RequestMapping("/reMap")
	public String reMap() {
		
		return "evaluation.evaluationMap";
	}
	
	// 마커 등록
	@RequestMapping("/registeMarker")
	public String registeMarker(@ModelAttribute MarkerVO marker, Model model,
									HttpServletRequest request) {
		logger.info("marker : " + marker);
		// 마커 등록
		try {
			evaService.registeMarker(marker);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 세션에 담기
		HttpSession session = request.getSession();
		session.setAttribute("regMarker", marker);
		
		// 마커 리스트 가져오기
		List<MarkerVO> markerList;
		try {
			markerList = evaService.getMarkerList();
			logger.info("markerList : " + markerList);
			session.setAttribute("markerList", markerList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return "redirect:/evaluation/reMap";
	}
	
	// 영역에 맞는 데이터 뽑아오기
	@RequestMapping("/areaData")
	@ResponseBody
	public List<MarkerVO> areaData(@ModelAttribute AreaMarkerVO areaMarker){
		List<MarkerVO> areaMarkerList = null;
		try {
			// 영역에 맞는 데이터 뽑아오기
			areaMarkerList = evaService.areaGetMarkerList(areaMarker);
			logger.info("areaMarkerList" + areaMarkerList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return areaMarkerList;
	}
	
	
	
	
	
}
